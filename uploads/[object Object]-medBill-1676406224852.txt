/* Draws a heart, based on https://mathworld.wolfram.com/HeartCurve.html
 */


#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <strings.h>

//to compile on both apple and unix platform
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <vector>
using namespace std; 

typedef struct _point2d {
  int x, y;
} point2d;

//window size for the graphics window
const int WINDOWSIZE = 500; 

GLfloat red[3] = {1.0, 0.0, 0.0};
GLfloat green[3] = {0.0, 1.0, 0.0};
GLfloat blue[3] = {0.0, 0.0, 1.0};


//the vector of points
vector<point2d>  heart;
double radius = 1.1; 
double dir = 1.1; 

void initialize_heart(vector<point2d>& heart); 
void draw_heart(vector<point2d>& heart); 


//functions registered with OpenGL
void display(void);
void keypress(unsigned char key, int x, int y);




// ****************************** 
// Initialize with points on a heart 
//The points are in the range [-200,200] center at (0,0)
void initialize_heart(vector<point2d>& pts) {

  printf("\ninitialize  heart\n"); 
  point2d p; 

  for (double a = 0; a < 2*M_PI; a+=.01) {
   p.x = sin(a) * sin(a) * sin(a); 
   p.y = (cos(a) - cos(2*a));
   pts.push_back(p);
  }

   
}


void timerFunc() {
      printf("Hello"); 
      radius*= dir; 
      if (radius > 10) dir = 0.9; 
      if (radius < .4) dir = 1.1; 
      glutPostRedisplay(); 
}


// called by GL to render the window. 
void display(void) {

  glClear(GL_COLOR_BUFFER_BIT);
  //clear all modeling transformations
  glMatrixMode(GL_MODELVIEW); 
  glLoadIdentity(); 

  //Default GL window is [-1,1]x[-1,1] with the origin in the center.
  
  //The points are in the range (-WINSIZE/2, WINSIZE/2)
  // scale to [-1,1]x[-1,1]
  glScalef(2.0/WINDOWSIZE, 2.0/WINDOWSIZE, 1.0);  


   draw_heart(heart); 

  /* execute the drawing commands */
  glFlush();
}




// ******************************
//draw the heart
void draw_heart(vector<point2d>& points){

  //set drawing color 
  glColor3fv(red);   

  //draw polygon filled 
  glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
  
  const int R= 1;
  for (int i=0; i< points.size(); i++) {
    
    //draw a small square centered at (points[i].x, points[i].y)
    glBegin(GL_POLYGON);
    glVertex2f(radius*points[i].x -R, radius*points[i].y-R);
    glVertex2f(radius*points[i].x +R, radius*points[i].y-R);
    glVertex2f(radius*points[i].x +R, radius*points[i].y+R);
    glVertex2f(radius*points[i].x -R, radius*points[i].y+R);
    glEnd();
    
  }
} //draw_points 





// ******************************
int main(int argc, char** argv) {

   
  //start the rendering 
  /* initialize GLUT  */
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
  glutInitWindowSize(WINDOWSIZE, WINDOWSIZE);
  glutInitWindowPosition(100,100);
  glutCreateWindow(argv[0]);
  //Initialize the heart
  initialize_heart(heart); 
  /* register callback functions */
  glutDisplayFunc(display); 
  glutKeyboardFunc(keypress);
  glutIdleFunc(timerFunc); 

  
  /* init GL */
  /* set background color black*/
  glClearColor(0, 0, 0, 0);   
  
  /* give control to event handler */
  glutMainLoop();
  return 0;
}


// ******************************
// Handler for key presses. called whenever a key is spressed */
void keypress(unsigned char key, int x, int y) {
  switch(key) {
  case 'q':
    exit(0);
    break;
  } //switch (key)

}//keypress



/* Handler for window re-size event. Called back when the window first appears and
   whenever the window is re-sized with its new width and height */
void reshape(GLsizei width, GLsizei height) {  // GLsizei for non-negative integer
     
   // Set the viewport to cover the new window
   glViewport(0, 0, width, height);
 
   glMatrixMode(GL_PROJECTION);  // To operate on the Projection matrix
   glLoadIdentity();             // Reset
   gluOrtho2D(0.0, (GLdouble) width, 0.0, (GLdouble) height); 
}


